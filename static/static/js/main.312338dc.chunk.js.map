{"version":3,"sources":["pages/home.tsx","components/auth/login-form.tsx","components/auth/sign-up-link.tsx","api/index.ts","pages/auth/login.tsx","components/auth/sign-up-form.tsx","components/auth/login-link.tsx","util/const.ts","pages/auth/sign-up.tsx","util/validate.ts","providers/navigation.tsx","components/layout/navigation.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Home","className","LoginForm","props","useState","username","setUsername","password","setPassword","onChange","event","target","name","value","onSubmit","htmlFor","type","autoComplete","SignUpLink","to","exact","API_ENDPOINT","get","url","a","fetch","method","mode","then","response","json","Login","preventDefault","console","log","length","error","result","JSON","stringify","SignUpForm","email","setEmail","LoginLink","emailRegex","SignUp","test","NavigationContext","React","createContext","text","NavigationProvider","children","navigation","Provider","NavigationConsumer","Consumer","Navigation","map","item","key","getLink","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.312338dc.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const Home: React.FunctionComponent = () => {\n  return (\n    <div className=\"container\">\n      <h1>Hello</h1>\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\n\n\ntype LoginFormProps = {\n  onSubmit: (event: React.FormEvent<HTMLFormElement>) => void\n};\n\n\nexport const LoginForm: React.FC<LoginFormProps> = (props: LoginFormProps) => {\n  let [username, setUsername] = useState(\"\");\n  let [password, setPassword] = useState(\"\");\n\n  const onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    switch (event.target.name) {\n      case \"username\":\n        setUsername(event.target.value);\n        break;\n      case \"password\":\n        setPassword(event.target.value);\n        break;\n      default:\n        break;\n    }\n  };\n\n  return (\n    <form onSubmit={props.onSubmit}>\n      <div className=\"field\">\n        <label htmlFor=\"username\">Username</label>\n        <input\n          type=\"text\"\n          name=\"username\"\n          onChange={onChange}\n          value={username}\n          autoComplete=\"false\"\n        />\n      </div>\n      <div className=\"field\">\n        <label htmlFor=\"password\">Password</label>\n        <input\n          type=\"password\"\n          name=\"password\"\n          onChange={onChange}\n          value={password}\n          autoComplete=\"false\"\n        />\n      </div>\n\n      <button type=\"submit\">\n        Submit\n      </button>\n    </form>\n  );\n};\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nexport const SignUpLink = () => {\n  return (\n    <Link to=\"/sign-up\" exact=\"true\">\n      Sign Up\n    </Link>\n  );\n};\n","export const API_VERSION = 1;\nexport const API_ENDPOINT = `http://127.0.0.1:8080/api/v${API_VERSION}`;\n\nexport const get = async (url: string) => {\n\treturn await fetch(\n\t\t`${API_ENDPOINT}${url}`,\n\t\t{method: \"GET\", mode: \"no-cors\"}\n\t).then((response: Response) => response.json());\n}\n\nexport const post = async (url: string, body: string) => {\n\treturn await fetch(\n\t\t`${API_ENDPOINT}${url}`,\n\t\t{\n\t\t\tmethod: \"POST\",\n\t\t\tmode: \"no-cors\",\n\t\t\tbody: body\n\t\t}\n\t).then((response: Response) => response.json());\n}","import React from \"react\";\nimport { LoginForm } from \"../../components/auth/login-form\";\nimport { SignUpLink } from \"../../components/auth/sign-up-link\";\nimport {get} from '../../api';\n\nexport const Login: React.FunctionComponent = () => {\n  const onSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    let target = event.target as any;\n\n    console.log(`\n      username: ${target[0].value}\n      password: ${target[1].value}\n    `);\n\n    if (target[0].value.length < 2) {\n      console.error(\"username must be longer than 2 characters\");\n    }\n    if (target[1].value.length < 8) {\n      console.error(\"password must be longer than 7 characters\");\n    }\n\n    let result = get(`/users/`);\n    console.log(`RESULTS:\n      ${JSON.stringify(result)}\n    `);\n  };\n\n  return (\n    <div className=\"container\">\n      <LoginForm onSubmit={onSubmit} />\n\n      <div className=\"box\">\n        <p>\n          Not yet Signed Up? Then please <SignUpLink />\n        </p>\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\n\ntype SignUpFormProps = {\n  onSubmit: (event: React.FormEvent<HTMLFormElement>) => void;\n};\n\nexport const SignUpForm = (props: SignUpFormProps) => {\n  let [username, setUsername] = useState(\"\");\n  let [email, setEmail] = useState(\"\");\n  let [password, setPassword] = useState(\"\");\n\n  const onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    switch (event.target.name) {\n      case \"username\":\n        setUsername(event.target.value);\n        break;\n      case \"password\":\n        setPassword(event.target.value);\n        break;\n      case \"email\":\n        setEmail(event.target.value);\n        break;\n    }\n  };\n\n  return (\n    <form onSubmit={props.onSubmit}>\n      <div className=\"field\">\n        <label htmlFor=\"username\">Username</label>\n        <input\n          type=\"text\"\n          name=\"username\"\n          value={username}\n          onChange={onChange}\n          autoComplete=\"false\"\n        />\n      </div>\n      <div className=\"field\">\n        <label htmlFor=\"email\">E-mail</label>\n        <input type=\"email\" name=\"email\" value={email} onChange={onChange} />\n      </div>\n      <div className=\"field\">\n        <label htmlFor=\"password\">Password</label>\n        <input\n          type=\"password\"\n          name=\"password\"\n          value={password}\n          onChange={onChange}\n          autoComplete=\"false\"\n        />\n      </div>\n\n      <button type=\"submit\">\n        Submit\n      </button>\n    </form>\n  );\n};\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nexport const LoginLink = () => {\n  return (\n    <Link to=\"/login\" exact=\"true\">\n      Log In\n    </Link>\n  );\n};\n","export const emailRegex = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;","import React from \"react\";\nimport { SignUpForm } from \"../../components/auth/sign-up-form\";\nimport { LoginLink } from \"../../components/auth/login-link\";\nimport { validateEmailString } from \"../../util/validate\";\n\nexport const SignUp: React.FunctionComponent = () => {\n  const onSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    let target = event.target as any;\n\n    console.log(`\n      username: ${target[0].value}\n      email   : ${target[1].value}\n      password: ${target[2].value}\n    `);\n\n    if (target[0].value.length < 2) {\n      console.error(\"username must be longer than 2 characters\");\n      // throw new Error(\"Username too short\");\n    }\n    if (!validateEmailString(target[1].value as string)) {\n      console.error(\"check your email it does not have valid format\");\n      // throw new Error(\"Password too short\");\n    }\n    if (target[2].value.length < 8) {\n      console.error(\"password must be longer than 7 characters\");\n      // throw new Error(\"Password too short\");\n    }\n  };\n\n  return (\n    <div className=\"container\">\n      <SignUpForm onSubmit={onSubmit} />\n\n      <div className=\"box\">\n        <p>\n          Already Signed Up? Then please <LoginLink />\n        </p>\n      </div>\n    </div>\n  );\n};\n","import {emailRegex} from './const';\n\nexport const validateEmailString = (email: string): boolean => {\n\treturn emailRegex.test(email);\n}","import React, { useState } from \"react\";\n\nexport const NavigationContext = React.createContext([\n  { url: \"/\", text: \"Home\" },\n  { url: \"/login\", text: \"Login\" }\n]);\n\nexport const NavigationProvider = ({ children }: any) => {\n  const [navigation] = useState([\n    { url: \"/\", text: \"Home\" },\n    { url: \"/login\", text: \"Login\" },\n    { url: \"/sign-up\", text: \"Sign-Up\" }\n  ]);\n\n  return (\n    <NavigationContext.Provider value={navigation}>\n      {children}\n    </NavigationContext.Provider>\n  );\n};\n\nexport const NavigationConsumer = NavigationContext.Consumer;\n","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport {\n  NavigationProvider,\n  NavigationConsumer\n} from \"../../providers/navigation\";\n\nexport type NavigationItem = { url: string; text: string };\n\nexport const Navigation: React.FunctionComponent = () => {\n  const getLink = (item: any) => {\n    return (\n      <NavLink to={item.url} exact={true} key={item.url} className=\"nav-link\">\n        {item.text}\n      </NavLink>\n    );\n  };\n  return (\n    <NavigationProvider>\n      <NavigationConsumer>\n        {(navigation: NavigationItem[]) => {\n          return (\n            <nav>{navigation.map((item: NavigationItem) => getLink(item))}</nav>\n          );\n        }}\n      </NavigationConsumer>\n    </NavigationProvider>\n  );\n};\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { Home } from \"./pages/home\";\nimport { Login } from \"./pages/auth/login\";\nimport { SignUp } from \"./pages/auth/sign-up\";\nimport { Navigation } from \"./components/layout/navigation\";\n\nconst App: React.FunctionComponent = () => {\n  return (\n    <Router>\n      <Navigation />\n      <Switch>\n        <Route path=\"/\" exact={true} component={Home} />\n        <Route path=\"/login\" component={Login} />\n        <Route path=\"/sign-up\" component={SignUp} />\n      </Switch>\n    </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./styles/normalize.css\";\nimport \"./styles/skeleton.css\";\nimport \"./styles/style.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}